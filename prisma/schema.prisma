// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  password      String?
  bio           String?    @db.Text
  location      String?
  phone         String?
  website       String?
  job_title     String?
  
  // User preferences
  theme         String?    @default("system")
  
  // Timestamps
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  experiences   Experience[]
  education     Education[]
  portfolios    Portfolio[]
  projects      Project[]
  skills        Skill[]
  socialLinks   SocialLink[]
  aiRequests    AIRequest[]
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Experience model - represents work experience
model Experience {
  id          String    @id @default(cuid())
  title       String
  company     String
  location    String
  startDate   DateTime
  endDate     DateTime?
  description String    @db.Text
  current     Boolean   @default(false)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
}

// Education model - represents educational background
model Education {
  id          String    @id @default(cuid())
  degree      String
  school      String
  location    String
  startDate   DateTime
  endDate     DateTime?
  description String    @db.Text
  current     Boolean   @default(false)
  achievements String[]  // Added achievements as a string array
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
}

// Portfolio model - represents a user's portfolio page
model Portfolio {
  id              String     @id @default(cuid())
  slug            String     // Removed @unique constraint from slug
  title           String     @default("My Portfolio")
  subtitle        String?
  description     String?    @db.Text
  isPublished     Boolean    @default(false)
  primaryColor    String?    @default("#3b82f6")
  secondaryColor  String?    @default("#10b981")
  fontFamily      String?    @default("Inter")
  seoTitle        String?
  seoDescription  String?
  viewCount       Int        @default(0)
  
  // Relations
  userId          String
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  @@unique([userId, slug]) // Combined unique constraint for userId and slug
  @@index([slug]) // Index on slug for faster lookups
  @@index([userId])
}

// Project model
model Project {
  id          String    @id @default(cuid())
  title       String
  description String    @db.Text
  imageUrl    String?
  liveUrl     String?
  repoUrl     String?
  technologies String[]
  isFeatured  Boolean   @default(false)
  order       Int       @default(0)
  
  // Relations
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
}

// Skill model
model Skill {
  id          String    @id @default(cuid())
  name        String
  category    String?
  proficiency Int?      @default(0) // 0-100
  order       Int       @default(0)
  
  // Relations
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
}

// Social Links model
model SocialLink {
  id          String    @id @default(cuid())
  platform    String
  url         String
  
  // Relations
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
}

// AI Request model - tracks AI usage
model AIRequest {
  id            String   @id @default(cuid())
  userId        String
  requestType   String
  promptLength  Int
  responseLength Int
  model         String
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
} 